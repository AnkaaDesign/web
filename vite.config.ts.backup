import { defineConfig, Plugin } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Plugin to replace environment variables in HTML
function htmlEnvReplace(): Plugin {
  return {
    name: "html-env-replace",
    transformIndexHtml(html) {
      // Read VITE_API_URL from current .env file (already loaded by Vite)
      // In production mode, Vite loads .env.production by default
      const apiUrl = process.env.VITE_API_URL || "http://localhost:3030";
      console.log(`[htmlEnvReplace] Using API URL: ${apiUrl}`);
      return html.replace(/%VITE_API_URL%/g, apiUrl);
    },
  };
}

// https://vite.dev/config/
export default defineConfig(({ mode }) => {
  const isDevelopment = mode === "development";

  // Base aliases for internal app paths
  const baseAliases: Record<string, string> = {
    "@": path.resolve(__dirname, "./src"),
    "@components": path.resolve(__dirname, "./src/components"),
    "@hooks": path.resolve(__dirname, "./src/hooks"),
    "@pages": path.resolve(__dirname, "./src/pages"),
    "@utils": path.resolve(__dirname, "./src/utils"),
    "@lib": path.resolve(__dirname, "./src/lib"),
    "@layouts": path.resolve(__dirname, "./src/layouts"),
    "react-native": "react-native-web",
  };

  // For development, add workspace package aliases for hot reload
  // For production, use the compiled dist files
  if (isDevelopment) {
    Object.assign(baseAliases, {
      "@ankaa/types": path.resolve(__dirname, "../../packages/types/src"),
      "@ankaa/api-client": path.resolve(__dirname, "../../packages/api-client/src"),
      "@ankaa/constants": path.resolve(__dirname, "../../packages/constants/src"),
      "@ankaa/hooks": path.resolve(__dirname, "../../packages/hooks/src"),
      "@ankaa/schemas": path.resolve(__dirname, "../../packages/schemas/src"),
      "@ankaa/utils": path.resolve(__dirname, "../../packages/utils/src"),
      "@ankaa/services": path.resolve(__dirname, "../../packages/services/src"),
    });
  } else {
    // For production builds, use the compiled dist files
    Object.assign(baseAliases, {
      "@ankaa/types": path.resolve(__dirname, "../../packages/types/dist/src"),
      "@ankaa/api-client": path.resolve(__dirname, "../../packages/api-client/dist/src"),
      "@ankaa/constants": path.resolve(__dirname, "../../packages/constants/dist/src"),
      "@ankaa/hooks": path.resolve(__dirname, "../../packages/hooks/dist/src"),
      "@ankaa/schemas": path.resolve(__dirname, "../../packages/schemas/dist/src"),
      "@ankaa/utils": path.resolve(__dirname, "../../packages/utils/dist/src"),
      "@ankaa/services": path.resolve(__dirname, "../../packages/services/dist/src"),
    });
  }

  return {
    plugins: [react(), htmlEnvReplace()],
    resolve: {
      alias: baseAliases,
      dedupe: ["react", "react-dom", "@tanstack/react-query", "axios", "@ankaa/api-client"],
    },
    define: {
      global: "globalThis",
    },
    optimizeDeps: {
      exclude: ["react-native"],
      include: [
        "react",
        "react-dom",
        "@tanstack/react-query",
        "lodash/debounce",
        "@radix-ui/react-popover",
        "zod", // Load zod before react-hook-form
        "react-hook-form",
        "@hookform/resolvers/zod",
        "@hookform/resolvers",
        "@ankaa/hooks",
        "axios",
        "@ankaa/api-client",
      ],
      esbuildOptions: {
        // Ensure axios is treated as a singleton
        define: {
          global: "globalThis",
        },
      },
    },
    build: {
      commonjsOptions: {
        transformMixedEsModules: true,
        include: [/packages\/.*\/dist/, /node_modules/],
      },
      rollupOptions: {
        output: {
          // Configure chunk loading to prevent race conditions
          inlineDynamicImports: false,
          manualChunks: (id) => {
            // CRITICAL: React Query MUST be in react-vendor to ensure it loads first
            if (id.includes("node_modules/react") || id.includes("node_modules/react-dom") || id.includes("@tanstack/react-query")) {
              return "react-vendor";
            }
            // Bundle zod with utils to ensure it's loaded before form-vendor
            if (id.includes("lodash") || id.includes("zod")) {
              return "utils-vendor";
            }
            // Keep form libraries separate but ensure zod is loaded first
            if (id.includes("react-hook-form") || id.includes("@hookform/resolvers")) {
              return "form-vendor";
            }
            // UI components
            if (id.includes("@radix-ui")) {
              return "ui-vendor";
            }
          },
          // Ensure proper chunk loading order with priority
          chunkFileNames: (chunkInfo) => {
            const facadeModuleId = chunkInfo.facadeModuleId ? chunkInfo.facadeModuleId.split('/').pop() : 'chunk';
            // Prefix react-vendor with 0- to ensure it loads first alphabetically
            if (chunkInfo.name === 'react-vendor') {
              return `assets/0-react-vendor-[hash].js`;
            }
            return `assets/${chunkInfo.name}-[hash].js`;
          },
        },
      },
      // Increase chunk size warning limit for better performance analysis
      chunkSizeWarningLimit: 1000,
      // Enable source maps in development
      sourcemap: isDevelopment,
    },
    server: {
      port: 5174,
      host: true,
      hmr: {
        overlay: true,
      },
      watch: {
        usePolling: false,
        ignored: ["**/node_modules/**", "**/.git/**", "**/dist/**", "**/build/**"],
      },
    },
  };
});
