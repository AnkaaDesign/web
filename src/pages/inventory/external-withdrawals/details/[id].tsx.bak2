import { useParams, useNavigate } from "react-router-dom";
import { useExternalWithdrawal } from "../../../../hooks";
import { routes, EXTERNAL_WITHDRAWAL_STATUS } from "../../../../constants";
import { Button } from "@/components/ui/button";
import { IconAlertTriangle, IconPackage, IconTrash } from "@tabler/icons-react";
import { toast } from "sonner";
import { DetailPageHeader } from "@/components/ui/detail-page-header";
import { ExternalWithdrawalInfoCard, ExternalWithdrawalItemsCard } from "@/components/inventory/external-withdrawal/detail";
import { ExternalWithdrawalActions } from "@/components/inventory/external-withdrawal/common/external-withdrawal-actions";
import { usePrivileges } from "../../../../hooks";
import { useState } from "react";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { useExternalWithdrawalMutations } from "../../../../hooks";
import { ErrorBoundary } from "@/components/navigation/error-boundary";
import { PrivilegeRoute } from "@/components/navigation/privilege-route";
import { SECTOR_PRIVILEGES } from "../../../../constants";
import { usePageTracker } from "@/hooks/use-page-tracker";

const ExternalWithdrawalDetailsPage = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const { canManageWarehouse } = usePrivileges();
  const { deleteMutation } = useExternalWithdrawalMutations();

  // Track page access
  usePageTracker({
    title: "Detalhes da Retirada Externa",
    icon: "package-export",
  });

  const {
    data: response,
    isLoading,
    error,
    refetch,
  } = useExternalWithdrawal(id!, {
    include: {
      items: {
        include: {
          item: {
            include: {
              category: true,
              brand: true,
              supplier: true,
              prices: { orderBy: { createdAt: "desc" }, take: 1 },
            },
          },
        },
      },
    },
    enabled: !!id,
  });

  const withdrawal = response?.data;

  if (isLoading) {
    return (
      <ErrorBoundary>
        <PrivilegeRoute requiredPrivilege={SECTOR_PRIVILEGES.WAREHOUSE}>
          <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-neutral-900 dark:to-neutral-800">
            <div className="container mx-auto p-4 sm:p-6 max-w-7xl">
              <div className="animate-pulse space-y-6">
                {/* Header Skeleton */}
                <div className="space-y-4">
                  <div className="flex items-center space-x-2">
                    <div className="h-4 w-16 bg-muted rounded"></div>
                    <div className="h-4 w-4 bg-muted rounded"></div>
                    <div className="h-4 w-20 bg-muted rounded"></div>
                    <div className="h-4 w-4 bg-muted rounded"></div>
                    <div className="h-4 w-24 bg-muted rounded"></div>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="h-8 bg-muted rounded w-48"></div>
                    <div className="flex gap-2">
                      <div className="h-9 w-20 bg-muted rounded"></div>
                      <div className="h-9 w-20 bg-muted rounded"></div>
                      <div className="h-9 w-16 bg-muted rounded"></div>
                    </div>
                  </div>
                </div>

                {/* Enhanced Header Card Skeleton */}
                <div className="h-48 bg-muted rounded-xl"></div>

                {/* 3 Column Grid Skeleton */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  <div className="h-96 bg-muted rounded-xl"></div>
                  <div className="h-96 bg-muted rounded-xl"></div>
                  <div className="h-96 bg-muted rounded-xl"></div>
                </div>
              </div>
            </div>
          </div>
        </PrivilegeRoute>
      </ErrorBoundary>
    );
  }

  if (error || !withdrawal) {
    return (
      <ErrorBoundary>
        <PrivilegeRoute requiredPrivilege={SECTOR_PRIVILEGES.WAREHOUSE}>
          <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-neutral-900 dark:to-neutral-800">
            <div className="container mx-auto p-4 sm:p-6 max-w-7xl">
              <div className="flex flex-1 items-center justify-center min-h-[60vh]">
                <div className="text-center px-4 max-w-md mx-auto">
                  <div className="animate-in fade-in-50 duration-500">
                    <div className="p-4 bg-red-50 dark:bg-red-900/20 rounded-full w-20 h-20 mx-auto mb-6 flex items-center justify-center">
                      <IconAlertTriangle className="h-10 w-10 text-red-500" />
                    </div>
                    <h2 className="text-xl sm:text-2xl font-semibold mb-3 text-foreground">
                      Retirada externa não encontrada
                    </h2>
                    <p className="text-sm sm:text-base text-muted-foreground mb-6 leading-relaxed">
                      A retirada externa que você está procurando não existe ou foi removida do sistema.
                    </p>
                    <div className="space-y-3">
                      <Button
                        onClick={() => navigate(routes.inventory.externalWithdrawals?.list || "/inventory/external-withdrawals")}
                        className="w-full sm:w-auto"
                      >
                        Ir para Lista de Retiradas
                      </Button>
                      <Button variant="outline" onClick={() => navigate(routes.inventory.root)} className="w-full sm:w-auto">
                        Ir para Estoque
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </PrivilegeRoute>
      </ErrorBoundary>
    );
  }

  const handleEdit = () => {
    navigate(`/inventory/external-withdrawals/edit/${withdrawal.id}`);
  };

  const handleRefresh = () => {
    refetch();
    toast.success("Dados atualizados com sucesso");
  };

  const handleDelete = async () => {
    try {
      await deleteMutation.mutateAsync(withdrawal.id);
      toast.success("Retirada externa excluída com sucesso");
      navigate(routes.inventory.externalWithdrawals?.list || "/inventory/external-withdrawals");
    } catch (error) {
      toast.error("Erro ao excluir retirada externa");
    }
  };

  // Create entity object for DetailPageHeader
  const entityForHeader = {
    id: withdrawal.id,
    name: `Retirada #${withdrawal.id.slice(-8)}`,
  };

  // Custom actions for the header
  const customActions = [];

  if (canManageWarehouse) {
    customActions.push({
      label: "Excluir",
      icon: IconTrash,
      onClick: () => setShowDeleteDialog(true),
      variant: "destructive" as const,
    });
  }

  // Check if withdrawal can be edited (only active and partially returned)
  const canEdit = canManageWarehouse && [
    EXTERNAL_WITHDRAWAL_STATUS.ACTIVE,
    EXTERNAL_WITHDRAWAL_STATUS.PARTIALLY_RETURNED
  ].includes(withdrawal.status);

  return (
    <ErrorBoundary>
      <PrivilegeRoute requiredPrivilege={SECTOR_PRIVILEGES.WAREHOUSE}>
        <div className="min-h-screen">
          <div className="container mx-auto px-4 sm:px-6 py-6 max-w-7xl">
            {/* Main Content */}
            <main className="space-y-6">
              {/* Hero Section - Enhanced Header with Actions */}
              <section className="animate-in fade-in-50 duration-500">
                <DetailPageHeader
                  entity={entityForHeader}
                  Icon={IconPackage}
                  className="shadow-lg"
                  onRefresh={handleRefresh}
                  onEdit={canEdit ? handleEdit : undefined}
                  customActions={customActions}
                  breadcrumbItems={[
                    { label: "Início", href: routes.home },
                    { label: "Estoque", href: routes.inventory.root },
                    { label: "Retiradas Externas", href: routes.inventory.externalWithdrawals?.list || "/inventory/external-withdrawals" },
                    { label: `#${withdrawal.id.slice(-8)}` }
                  ]}
                />
              </section>

              {/* Core Information Grid */}
              <section className="animate-in fade-in-50 duration-700">
                {/* Mobile: Single column stacked */}
                <div className="block lg:hidden space-y-4">
                  <ExternalWithdrawalInfoCard withdrawal={withdrawal} className="h-full" />
                  <ExternalWithdrawalItemsCard withdrawal={withdrawal} className="h-full" />
                  <ExternalWithdrawalActions withdrawal={withdrawal} className="h-full" />
                </div>

                {/* Desktop/Tablet: 3 columns grid */}
                <div className="hidden lg:block">
                  <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
                    <div className="xl:col-span-1">
                      <ExternalWithdrawalInfoCard withdrawal={withdrawal} className="h-full" />
                    </div>
                    <div className="xl:col-span-1">
                      <ExternalWithdrawalItemsCard withdrawal={withdrawal} className="h-full" />
                    </div>
                    <div className="xl:col-span-1">
                      <ExternalWithdrawalActions withdrawal={withdrawal} className="h-full" />
                    </div>
                  </div>
                </div>
              </section>
            </main>
          </div>

          {/* Delete Confirmation Dialog */}
          <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>
                <AlertDialogDescription>
                  Tem certeza que deseja excluir esta retirada externa? Esta ação não pode ser desfeita.
                  <br />
                  <br />
                  <strong>Retirador:</strong> {withdrawal.withdrawerName}
                  <br />
                  <strong>Valor Total:</strong> R$ {withdrawal.totalPrice?.toFixed(2) || "0,00"}
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancelar</AlertDialogCancel>
                <AlertDialogAction
                  onClick={handleDelete}
                  className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                >
                  Excluir
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </div>
      </PrivilegeRoute>
    </ErrorBoundary>
  );
};

export default ExternalWithdrawalDetailsPage;