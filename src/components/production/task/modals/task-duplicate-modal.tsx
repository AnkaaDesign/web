import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useTaskMutations } from "../../../../hooks";
import { TASK_STATUS } from "../../../../constants";
import { IconLoader2 } from "@tabler/icons-react";
import type { Task } from "../../../../types";

// Schema for duplicate form
const duplicateSchema = z.object({
  serialNumber: z
    .string()
    .min(1, "Número de série é obrigatório")
    .regex(/^[A-Z0-9-]+$/, "Número de série deve conter apenas letras maiúsculas, números e hífens"),
  plate: z
    .string()
    .regex(/^[A-Z0-9-]+$/, "A placa deve conter apenas letras maiúsculas, números e hífens")
    .nullable()
    .optional()
    .transform((val) => (val === "" ? null : val)),
});

type DuplicateFormData = z.infer<typeof duplicateSchema>;

interface TaskDuplicateModalProps {
  task: Task | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSuccess?: () => void;
}

export const TaskDuplicateModal = ({ task, open, onOpenChange, onSuccess }: TaskDuplicateModalProps) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { createAsync } = useTaskMutations();

  const form = useForm<DuplicateFormData>({
    resolver: zodResolver(duplicateSchema),
    defaultValues: {
      serialNumber: "",
      plate: task?.plate || "",
    },
  });

  // Reset form when task changes
  const handleOpenChange = (newOpen: boolean) => {
    if (newOpen && task) {
      form.reset({
        serialNumber: "",
        plate: task.plate || "",
      });
    }
    onOpenChange(newOpen);
  };

  const handleSubmit = async (data: DuplicateFormData) => {
    if (!task) return;

    try {
      setIsSubmitting(true);

      // Create new task with all the same data except:
      // - New serial number and plate from form
      // - Reset status to PENDING
      // - Reset dates
      // - New ID (generated by API)
      const newTaskData = {
        // Basic fields
        name: task.name,
        status: TASK_STATUS.PENDING,
        serialNumber: data.serialNumber,
        plate: data.plate,
        details: task.details,
        entryDate: task.entryDate,
        term: task.term,
        startedAt: null, // Reset
        finishedAt: null, // Reset
        paintId: task.paintId,
        customerId: task.customerId,
        sectorId: task.sectorId,
        commission: task.commission, // Required field
        budgetId: task.budgetId,
        nfeId: task.nfeId,
        receiptId: task.receiptId,
        price: task.price,

        // Relations - copy artwork and paint IDs
        artworkIds: task.artworks?.map((file) => file.id),
        paintIds: task.logoPaints?.map((paint) => paint.id),

        // Complex relations - copy nested data
        observation: task.observation
          ? {
              description: task.observation.description,
              artworkIds: task.observation.artworks?.map((file) => file.id) || [],
            }
          : null,

        services: task.services?.map((service) => ({
          status: service.status,
          statusOrder: service.statusOrder,
          description: service.description,
          startedAt: null, // Reset service dates
          finishedAt: null,
        })),

        truck: task.truck
          ? {
              xPosition: task.truck.xPosition,
              yPosition: task.truck.yPosition,
              garageId: task.truck.garageId,
            }
          : null,

        // Note: cuts are not duplicated as they are separate records
        // The new task will need new cut entries if required
        cut: null,

        // Note: airbrushings are not duplicated as they are separate records
        // The new task will need new airbrushing entries if required
      };

      const result = await createAsync(newTaskData);

      if (result.success) {
        handleOpenChange(false);
        onSuccess?.();
      }
    } catch (error) {
      console.error("Error duplicating task:", error);
      // Error is handled by the mutation hook
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!task) return null;

  return (
    <Dialog open={open} onOpenChange={handleOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>Duplicar Tarefa</DialogTitle>
          <DialogDescription>Criando uma cópia de "{task.name}". Informe o número de série e a placa para a nova tarefa.</DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
            {/* Serial Number */}
            <FormField
              control={form.control}
              name="serialNumber"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Número de Série *</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      placeholder="Ex: ABC-12345"
                      className="uppercase"
                      onChange={(e) => field.onChange(e.target.value.toUpperCase())}
                      disabled={isSubmitting}
                      autoFocus
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Plate */}
            <FormField
              control={form.control}
              name="plate"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Placa</FormLabel>
                  <FormControl>
                    <Input type="plate" {...field} value={field.value || ""} disabled={isSubmitting} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => handleOpenChange(false)} disabled={isSubmitting}>
                Cancelar
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting && <IconLoader2 className="mr-2 h-4 w-4 animate-spin" />}
                Duplicar Tarefa
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
};
